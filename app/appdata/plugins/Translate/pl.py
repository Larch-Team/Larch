"""
Tutaj umieść dokumentację swojego pluginu
"""
import typing as tp
import re

SOCKET = 'Translate'
VERSION = '0.0.1'

ENGINE = {
    "There is no proof started":"Nie rozpoczęto dowodu",
    "This setup already exists":"Setup o takiej nazwie już istnieje",
    "This setup doesn't exists":"Setup o takiej nazwie nie istnieje",
    "Changing this plugin is not allowed while proving":"Nie możesz zmieniać tego pluginu podczas prowadzenia dowodu",
    'No socket or plugin found in the program':"Nie ma takiego socketu/pluginu",
    'There is no socket named this way':"Nie ma takiego socketu",
    "No such rule":"Nie ma reguły o tej nazwie",
    "Wrong context":"Dostarczono nieprawidłowy kontekst do reguły",
    "Nothing to undo":"Brak kroków do wycofania",
    "Cannot save autogenerated proofs":"Nie możesz zapisywać automatycznie wygenerowanych dowodów",
    'Proof saved successfully':"Udało się zapisać dowód",
    'File with this name already exists':"Plik o takiej nazwie już istnieje",
    'There is already a proof started. Save or finish it and leave the current proof to load a saved one.':"Dowód został już rozpoczęty, zapisz go, lub ukończ i wyjdź z dowodu, aby wczytać inny",
    'There is no such save file':"Dowód o tej nazwie nie został zapisany",
    "Proof loaded successfully":"Dowód udało się wczytać",
    "You can't check an unfinished proof":"Ukończ dowód, aby go sprawdzić",
    "The proof cannot be finished":"Nie udało się dokończyć dowodu",
    "The proof is finished": "Udało się ukończyć dowód",
    "This formula is a tautology":"Ta formuła jest tautologią",
    "This formula is not a tautology":"Ta formuła nie jest tautologią",
    "Branch with this name doesn't exist in this proof":"Nie ma gałęzi o takiej nazwie w tym dowodzie",
    "No such setup exists":"Setup o takiej nazwie nie istnieje",
    "Setup was found":"Udało znaleźć się setup",
    "No such socket":"Nie ma takiego socketu",
    "No such plugin":"Plugin o tej nazwie nie istnieje",
    "Proof was deleted":"Usunięto dowód",
    
}

def translate_engine(phrase: str) -> str:
    if (r := ENGINE.get(phrase)):
        return r
    for key, val in ENGINE.items():
        if re.match(key, phrase):
            return val 
    else:
        return phrase    